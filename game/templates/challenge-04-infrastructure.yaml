# =============================================================================
# CHALLENGE 04: Network Sidestep - Internal Infrastructure
# =============================================================================
# This file contains the internal services that players should not be able
# to directly inspect or describe. Only the frontend and player pod remain
# in the player namespace for interaction.
# =============================================================================

# --- ConfigMap with discovery hints and admin token ---------------
# This stays in the player namespace so the service account can access it
apiVersion: v1
kind: ConfigMap
metadata:
  name: o4-network-challenge-config
  namespace: {{ .Values.playerNamespace | default "default" }}
data:
  admin-token: "o4-admin-proxy-secret-2024"

---
# --- Internal API Service (middle tier) ---------------------------
# This is hidden in the game namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: o4-internal-api
  namespace: {{ .Release.Namespace }}
  labels:
    app: o4-internal-api
    network: api
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: o4-internal-api
  template:
    metadata:
      labels:
        app: o4-internal-api
        network: api
        tier: backend
    spec:
      containers:
        - name: api
          image: gcr.io/distroless/python3-debian11:nonroot
          ports:
            - containerPort: 8080
          command: ["python3", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import urllib.request
              import json
              import os
              
              class APIHandler(http.server.BaseHTTPRequestHandler):
                  def do_GET(self):
                      # Check if request is from allowed frontend pods
                      # This simulates the network policy check
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      
                      if self.path == '/status':
                          response = {
                              "status": "API is running",
                              "message": "This API connects to secure services",
                          }
                      elif self.path == '/admin':
                          response = {
                              "error": "Access denied", 
                              "hint": "Admin access requires going through o4-admin-proxy service",
                              "required": "X-Admin-Token header"
                          }
                      else:
                          response = {
                              "endpoints": ["/status", "/admin"],
                              "note": "Direct access to secure backend is blocked by network policies"
                          }
                      
                      self.wfile.write(json.dumps(response, indent=2).encode())
              
              PORT = 8080
              with socketserver.TCPServer(("", PORT), APIHandler) as httpd:
                  print("Internal API server starting on port 8080")
                  print("This service has network restrictions...")
                  httpd.serve_forever()
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"

---
# Service with ExternalName to make it accessible from player namespace
apiVersion: v1
kind: Service
metadata:
  name: o4-internal-api
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  type: ExternalName
  externalName: o4-internal-api.{{ .Release.Namespace }}.svc.cluster.local
  ports:
    - port: 80
      targetPort: 8080

---
# The actual internal service in game namespace
apiVersion: v1
kind: Service
metadata:
  name: o4-internal-api
  namespace: {{ .Release.Namespace }}
  labels:
    network: api
    tier: backend
spec:
  selector:
    app: o4-internal-api
  ports:
    - port: 80
      targetPort: 8080

---
# --- Admin Proxy (gateway requiring authentication) ----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: o4-admin-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    app: o4-admin-proxy
    network: proxy
    tier: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: o4-admin-proxy
  template:
    metadata:
      labels:
        app: o4-admin-proxy
        network: proxy
        tier: gateway
    spec:
      containers:
        - name: proxy
          image: gcr.io/distroless/python3-debian11:nonroot
          ports:
            - containerPort: 8080
          command: ["python3", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import urllib.request
              import json
              
              class ProxyHandler(http.server.BaseHTTPRequestHandler):
                  def do_GET(self):
                      # Check for admin token
                      auth_token = self.headers.get('X-Admin-Token')
                      expected_token = "o4-admin-proxy-secret-2024"
                      
                      if not auth_token:
                          self.send_response(401)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          response = {
                              "error": "Missing authentication",
                              "required": "X-Admin-Token header",
                              "hint": "Check configuration files for the token"
                          }
                          self.wfile.write(json.dumps(response, indent=2).encode())
                          return
                      
                      if auth_token != expected_token:
                          self.send_response(403)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          response = {
                              "error": "Invalid token",
                              "provided": auth_token
                          }
                          self.wfile.write(json.dumps(response, indent=2).encode())
                          return
                      
                      # Valid token - proxy to secure backend
                      try:
                          with urllib.request.urlopen('http://o4-secure-backend:80' + self.path) as backend_response:
                              content = backend_response.read()
                              self.send_response(200)
                              self.send_header('Content-type', 'text/html')
                              self.end_headers()
                              self.wfile.write(content)
                      except Exception as e:
                          self.send_response(500)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          response = {"error": f"Backend connection failed: {str(e)}"}
                          self.wfile.write(json.dumps(response).encode())
              
              PORT = 8080
              with socketserver.TCPServer(("", PORT), ProxyHandler) as httpd:
                  print("Admin proxy server starting on port 8080")
                  print("Requires X-Admin-Token header for authentication")
                  httpd.serve_forever()
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"

---
# ExternalName service for player namespace access
apiVersion: v1
kind: Service
metadata:
  name: o4-admin-proxy
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  type: ExternalName
  externalName: o4-admin-proxy.{{ .Release.Namespace }}.svc.cluster.local
  ports:
    - port: 80
      targetPort: 8080

---
# Actual service in game namespace
apiVersion: v1
kind: Service
metadata:
  name: o4-admin-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    network: proxy
    tier: gateway
spec:
  selector:
    app: o4-admin-proxy
  ports:
    - port: 80
      targetPort: 8080

---
# --- Secure Backend (contains the flag) ----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: o4-secure-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: o4-secure-backend
    network: secure
    tier: data
spec:
  replicas: 1
  selector:
    matchLabels:
      app: o4-secure-backend
  template:
    metadata:
      labels:
        app: o4-secure-backend
        network: secure
        tier: data
    spec:
      containers:
        - name: backend
          image: gcr.io/distroless/python3-debian11:nonroot
          ports:
            - containerPort: 8080
          command: ["python3", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import os
              
              class SecureHandler(http.server.BaseHTTPRequestHandler):
                  def do_GET(self):
                      self.send_response(200)
                      self.send_header('Content-type', 'text/html')
                      self.end_headers()
                      
                      flag = os.environ.get('FLAG', 'CTF{FLAG_NOT_SET}')
                      html = f'''
                      <html>
                      <head><title>Secure Backend</title></head>
                      <body>
                          <h1>🎉 Success!</h1>
                          <p>You've successfully navigated the network policies!</p>
                          <p><strong>Flag:</strong> <code>{flag}</code></p>
                      </body>
                      </html>
                      '''
                      self.wfile.write(html.encode())
              
              PORT = 8080
              with socketserver.TCPServer(("", PORT), SecureHandler) as httpd:
                  print("Secure backend starting on port 8080")
                  print("This service is protected by network policies")
                  httpd.serve_forever()
          env:
            - name: FLAG
              value: {{ .Values.flags.networkSidestep | default "CTF{BRIDGE_NETWORK_COMPROMISE}" }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"

---
# ExternalName service for backend access
apiVersion: v1
kind: Service
metadata:
  name: o4-secure-backend
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  type: ExternalName
  externalName: o4-secure-backend.{{ .Release.Namespace }}.svc.cluster.local
  ports:
    - port: 80
      targetPort: 8080

---
# Actual backend service in game namespace
apiVersion: v1
kind: Service
metadata:
  name: o4-secure-backend
  namespace: {{ .Release.Namespace }}
  labels:
    network: secure
    tier: data
spec:
  selector:
    app: o4-secure-backend
  ports:
    - port: 80
      targetPort: 8080

---
# --- Network Policy: Block player -> secure backend direct access ---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: block-direct-backend-access
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  podSelector:
    matchLabels:
      network: secure
  policyTypes:
  - Ingress
  ingress:
  # Only allow o4-admin-proxy to access secure backend
  - from:
    - podSelector:
        matchLabels:
          network: proxy
    ports:
    - protocol: TCP
      port: 8080

---
# --- Network Policy: Restrict o4-internal-api access -------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: restrict-o4-internal-api
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  podSelector:
    matchLabels:
      network: api
  policyTypes:
  - Ingress
  ingress:
  # Allow frontend and player to access o4-internal-api
  - from:
    - podSelector:
        matchLabels:
          network: frontend
    - podSelector:
        matchLabels:
          network: player
    ports:
    - protocol: TCP
      port: 8080

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-access
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  podSelector:
    matchLabels:
      network: frontend
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          network: player
    ports:
    - protocol: TCP
      port: 8080

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-proxy-access
  namespace: {{ .Values.playerNamespace | default "default" }}
spec:
  podSelector:
    matchLabels:
      network: proxy
  policyTypes:
  - Ingress
  ingress:
  # Allow player to access o4-admin-proxy
  - from:
    - podSelector:
        matchLabels:
          network: player
    ports:
    - protocol: TCP
      port: 8080 