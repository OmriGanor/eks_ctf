# =============================================================================
# CHALLENGE 01: Leaky Secret
# =============================================================================
#
# OBJECTIVE:
# Exploit misconfigured RBAC permissions to access a secret that you're only
# supposed to "watch" but not directly read.
#
# SCENARIO:
# A secret containing a flag exists in your namespace, but the RBAC permissions
# only grant "watch" access to secrets, not "get" or "list". However, watch
# permissions can be exploited to see secret contents during updates.
#
# HOW TO SOLVE:
# 1. Try to list secrets directly (this will fail):
#    kubectl get secrets
#
# 2. Try to read the secret directly (this will also fail):
#    kubectl get secret leaky -o yaml
#
# 3. Use the watch permission to monitor secret changes:
#    kubectl get secrets --watch
#
# 4. In another terminal, trigger a secret update to make it appear in the watch:
#    kubectl patch secret leaky -p '{"metadata":{"annotations":{"updated":"true"}}}'
#
# 5. The secret content will be displayed in the watch output, revealing the flag.
#
# ALTERNATIVE APPROACHES:
# - Use kubectl get secrets --watch -o yaml for full YAML output
# - Monitor with: kubectl get secrets leaky --watch -o jsonpath='{.data.flag}'
# - Decode the base64 flag: echo "<base64-string>" | base64 -d
#
# KEY CONCEPTS:
# - Kubernetes RBAC (Role-Based Access Control)
# - Secret management and security
# - Watch vs Get/List permissions
# - RBAC permission exploitation
# - Base64 encoding in Kubernetes secrets
#
# SECURITY LESSON:
# Watch permissions can be more powerful than intended. Be careful when
# granting watch access to sensitive resources like secrets.
#
# =============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: leaky
  namespace: {{ include "player.ns" . }}
  annotations:
    hint: "You can only WATCH me"
immutable: false
data:
  flag: {{ .Values.flags.leakySecret | b64enc }}
---
# Role granting only watch on secrets
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: watch-only
  namespace: {{ include "player.ns" . }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["watch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: watch-only-bind
  namespace: {{ include "player.ns" . }}
roleRef:
  kind: Role
  name: watch-only
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:authenticated
