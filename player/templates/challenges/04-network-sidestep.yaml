# =============================================================================
# CHALLENGE 04: Network Sidestep
# =============================================================================
#
# OBJECTIVE:
# Navigate through network policies and service discovery to reach the secure
# backend service and retrieve the flag. The internal services are hidden from
# direct inspection to maintain the discovery aspect of the challenge.
#
# SCENARIO:
# You have access to a pod (o4-player-box) with a service account that has
# limited permissions for service discovery. There are multiple services in 
# the namespace, but network policies restrict direct access to the secure
# backend containing the flag. You can only see the frontend and your player box.
#
# HOW TO SOLVE:
# 1. Start by accessing your player pod:
#    kubectl exec -it deployment/o4-player-box -- /bin/sh
#
# 2. Use your service account token to discover available services:
#    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
#    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
#    curl -H "Authorization: Bearer $TOKEN" \
#         -k https://kubernetes.default.svc.cluster.local/api/v1/namespaces/$NAMESPACE/services
#
# 3. List configmaps to find configuration data:
#    curl -H "Authorization: Bearer $TOKEN" \
#         -k https://kubernetes.default.svc.cluster.local/api/v1/namespaces/$NAMESPACE/configmaps
#
# 4. Retrieve the admin token from the configmap:
#    curl -H "Authorization: Bearer $TOKEN" \
#         -k https://kubernetes.default.svc.cluster.local/api/v1/namespaces/$NAMESPACE/configmaps/o4-network-challenge-config
#
# 5. Test access to different services and understand the network flow:
#    - o4-web-frontend: Entry point (accessible)
#    - o4-internal-api: Middle tier (discoverable via API)
#    - o4-admin-proxy: Gateway requiring authentication
#    - o4-secure-backend: Contains flag (blocked by network policy)
#
# 6. Use the discovered admin token to authenticate with the proxy:
#    curl -H "X-Admin-Token: o4-admin-proxy-secret-2024" \
#         http://o4-admin-proxy/
#
# 7. The proxy will forward your request to the secure backend, bypassing
#    the network policy restriction and revealing the flag.
#
# KEY CONCEPTS:
# - Kubernetes RBAC and service accounts
# - Service discovery using the Kubernetes API
# - Network policies and ingress rules
# - Authentication tokens and proxy patterns
# - Multi-tier application architecture
#
# NETWORK POLICY DETAILS:
# - Direct access to o4-secure-backend is blocked (only o4-admin-proxy allowed)
# - o4-internal-api only accepts traffic from frontend and player pods
# - Player pod can access frontend and proxy services
# - Authentication is required at the proxy level, not network level
#
# SECURITY NOTE:
# The internal services (API, proxy, backend) are deployed by the game
# infrastructure to prevent players from inspecting them directly via
# kubectl describe/get commands, maintaining the discovery challenge.
#
# =============================================================================

{{- $ns := include "player.ns" . }}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-discovery
  namespace: {{ $ns }}
  annotations:
    hint: "This service account has permissions to discover services and read configuration. 
          Check what permissions are available using the mounted token."

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: network-discovery-role
  namespace: {{ $ns }}
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames:
    - o4-network-challenge-config
  verbs: ["get"]

---
# --- RoleBinding for service discovery -------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: network-discovery-binding
  namespace: {{ $ns }}
subjects:
- kind: ServiceAccount
  name: network-discovery
  namespace: {{ $ns }}
roleRef:
  kind: Role
  name: network-discovery-role
  apiGroup: rbac.authorization.k8s.io

---
# --- Frontend Web Service (player entry point) -------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: o4-web-frontend
  namespace: {{ $ns }}
  labels:
    app: o4-web-frontend
    network: frontend
    tier: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: o4-web-frontend
  template:
    metadata:
      labels:
        app: o4-web-frontend
        network: frontend
        tier: web
    spec:
      containers:
        - name: frontend
          image: gcr.io/distroless/python3-debian11:nonroot
          ports:
            - containerPort: 8080
          command: ["python3", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import urllib.request
              import json
              import os
              
              class FrontendHandler(http.server.BaseHTTPRequestHandler):
                  def do_GET(self):
                      self.send_response(200)
                      self.send_header('Content-type', 'text/html')
                      self.end_headers()
                      
                      # Try to connect to internal API
                      api_status = "Connection Failed"
                      error_detail = ""
                      try:
                          with urllib.request.urlopen('http://o4-internal-api.ctfd.svc.cluster.local:80/status', timeout=2) as response:
                              api_status = "Connected"
                      except Exception as e:
                          error_detail = f"Error: {str(e)}"
                          print(f"Frontend failed to connect to o4-internal-api: {e}")
                      
                      html = f'''
                      <html>
                      <head><title>Corporate Dashboard</title></head>
                      <body>
                          <h1>Corporate Internal Dashboard</h1>
                          <h2>Service Status</h2>
                          <p><strong>Internal API:</strong> <span style="color: red">{api_status}</span></p>
                          <p><em>{error_detail}</em></p>
                          <hr>
                          <p><small>This frontend service tries to connect to the o4-internal-api service but is being blocked.</small></p>
                      </body>
                      </html>
                      '''
                      self.wfile.write(html.encode())
              
              PORT = 8080
              with socketserver.TCPServer(("", PORT), FrontendHandler) as httpd:
                  print("Frontend server starting on port 8080")
                  print("Attempting to connect to o4-internal-api service...")
                  httpd.serve_forever()
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: o4-web-frontend
  namespace: {{ $ns }}
  labels:
    network: frontend
    tier: web
spec:
  selector:
    app: o4-web-frontend
  ports:
    - port: 80
      targetPort: 8080

---
# --- Player Access Pod -----------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: o4-player-box
  namespace: {{ $ns }}
  labels:
    app: o4-player-box
    network: player
spec:
  replicas: 1
  selector:
    matchLabels:
      app: o4-player-box
  template:
    metadata:
      labels:
        app: o4-player-box
        network: player
    spec:
      serviceAccountName: network-discovery
      containers:
        - name: shell
          image: radial/busyboxplus:curl
          command: ["/bin/sh", "-c", "sleep 3600"]
          env:
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc.cluster.local"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
            limits:
              cpu: "100m"
              memory: "64Mi" 