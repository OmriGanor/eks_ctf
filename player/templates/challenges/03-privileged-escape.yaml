# =============================================================================
# CHALLENGE 03: Privileged Container Escape
# =============================================================================
#
# OBJECTIVE:
# Escape from a privileged container to access the simulated "host" filesystem
# and find the hidden flag.
#
# SCENARIO:
# A container is running with privileged security context, which grants it
# extensive capabilities similar to running as root on the host. This
# misconfiguration allows container escape techniques to access host resources.
# The challenge simulates a host filesystem mounted at /host.
#
# HOW TO SOLVE:
# 1. Access the privileged container:
#    kubectl exec -it deployment/privileged-victim -- /bin/sh
#
# 2. Verify you're in a privileged container:
#    id
#    cat /proc/self/status | grep Cap
#
# 3. Explore the mounted host filesystem:
#    ls -la /host
#
# 4. Search through typical host system directories:
#    ls -la /host/var/lib/kubelet/
#    ls -la /host/etc/kubernetes/
#    ls -la /host/root/
#
# 5. Look for hidden files (files starting with .):
#    find /host -name ".*" -type f 2>/dev/null
#
# 6. Check the kubelet secrets directory for hidden files:
#    ls -la /host/var/lib/kubelet/secrets/
#    cat /host/var/lib/kubelet/secrets/.hidden_flag
#
# ALTERNATIVE APPROACHES:
# - Use find to search for files containing "CTF": 
#   find /host -type f -exec grep -l "CTF" {} \; 2>/dev/null
# - Search for recently modified files: find /host -type f -mtime -1 2>/dev/null
# - Look for files with specific patterns: find /host -name "*flag*" 2>/dev/null
#
# KEY CONCEPTS:
# - Privileged containers and security contexts
# - Container escape techniques
# - Host filesystem access from containers
# - Linux capabilities and privileges
# - File system exploration and enumeration
#
# SECURITY LESSON:
# Privileged containers have almost the same access as processes running
# directly on the host. They should be avoided unless absolutely necessary
# and only used with proper security controls and monitoring.
#
# COMMON PRIVILEGED CONTAINER RISKS:
# - Access to host filesystem
# - Ability to load kernel modules
# - Access to host devices
# - Bypassing container isolation
# - Potential for complete host compromise
#
# =============================================================================

{{- $ns := include "player.ns" . }}

# --- Privileged Pod for Container Escape Challenge ---------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: privileged-victim
  namespace: {{ $ns }}
  labels:
    ctf-challenge: "privileged-escape"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: privileged-victim
  template:
    metadata:
      labels:
        app: privileged-victim
      annotations:
        hint: "This container seems to have too many privileges. Can you escape to the 'host'?"
    spec:
      # Init container to set up the simulated host filesystem
      initContainers:
      - name: setup-host-fs
        image: busybox
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create realistic host directory structure
          mkdir -p /host-sim/var/lib/kubelet/secrets
          mkdir -p /host-sim/etc/kubernetes
          mkdir -p /host-sim/proc/1
          mkdir -p /host-sim/root/.ssh
          mkdir -p /host-sim/tmp
          
          # Place some decoy files
          echo "Not the flag" > /host-sim/var/lib/kubelet/config.yaml
          echo "Still not the flag" > /host-sim/etc/kubernetes/admin.conf
          echo "Nope, try again" > /host-sim/root/.ssh/authorized_keys
          
          # Hide the real flag in a less obvious location
          echo "{{ .Values.flags.privilegedEscape }}" > /host-sim/var/lib/kubelet/secrets/.hidden_flag
          
          # Create some realistic proc entries
          echo "1" > /host-sim/proc/1/stat
          echo "init" > /host-sim/proc/1/comm
          
          # Set permissions to make it more realistic
          chmod 600 /host-sim/root/.ssh/authorized_keys
          chmod 644 /host-sim/var/lib/kubelet/secrets/.hidden_flag
        volumeMounts:
        - name: host-simulation
          mountPath: /host-sim
        securityContext:
          runAsUser: 0
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "100m"
            memory: "64Mi"
      
      containers:
      - name: victim-container
        image: busybox
        command: ["/bin/sh", "-c"]
        args: ["sleep 3600"]
        # Privileged container - the vulnerability
        securityContext:
          privileged: true
          runAsUser: 0
          allowPrivilegeEscalation: true
        volumeMounts:
        # Mount the simulated host filesystem at /host (common breakout location)
        - name: host-simulation
          mountPath: /host
          readOnly: true
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "100m"
            memory: "64Mi"
      
      volumes:
      - name: host-simulation
        emptyDir: {}
